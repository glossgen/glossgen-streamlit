import streamlit as st
import pandas as pd
from typing import Optional

from glossgen.config.app_config import AppConfig
from glossgen.state.session_state import SessionState
from glossgen.services.database import DatabaseService
from sqlalchemy import text
class DatabaseTab:
    """Manages the database tab UI components"""
    
    def __init__(self):
        self.config = AppConfig()
    
    def render(self) -> None:
        """Render the database tab content"""
        if not st.session_state['db_connected']:
            st.error("Please connect to a database first.")
            return
        
        self._render_table_list()
        self._render_table_preview()
        self._render_sql_query_box()
        # self._render_analysis_buttons()
    
    def _render_table_list(self) -> None:
        """Render the list of tables in the database"""
        st.write("List of Tables in Database")
        st.table(pd.DataFrame({'Tables': st.session_state['tables']}))
    
    def _render_table_preview(self) -> None:
        """Render the preview of selected table"""
        self.selected_table = st.selectbox(
            "Select a Table to Preview",
            st.session_state['tables']
        )
        
        if self.selected_table:
            st.write("Table Sample Data")
            sample_df = st.session_state['extractor'].get_top_n_dataframe(
                self.selected_table,
                self.config.DEFAULT_PREVIEW_ROWS
            )
            st.dataframe(sample_df)
    
    def _render_analysis_buttons(self) -> None:
        """Render buttons for generating glossaries and relationships"""
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("Generate Data Glossaries"):
                self._handle_glossary_generation()
        
        with col2:
            if st.button("Generate Table Relationships"):
                self._handle_relationship_generation()
    
    def _handle_glossary_generation(self) -> None:
        """Handle the glossary generation process"""
        st.session_state['data_glossary_submitted'] = True
        st.write("Started generating data glossaries!")
        
        glossary_dicts = {}
        for table in st.session_state['tables']:
            with st.spinner(f"AI Generating glossary for table: {table}"):
                glossary_dict = st.session_state['extractor'].generate_schema_table_for_table(table)
                glossary_dicts[table] = pd.DataFrame(glossary_dict)
        
        SessionState.update_glossary_data(glossary_dicts)
        st.write("Glossaries generated by AI. Go to Glossary tab to view.")
    
    def _handle_relationship_generation(self) -> None:
        """Handle the relationship generation process"""
        st.session_state['data_relationships_submitted'] = True
        st.write("Started generating table relationships!")
        # print(st.session_state['tables'])
        relationship_matrix = st.session_state['extractor'].get_relationship_matrix(
            st.session_state['tables']
        )
        
        SessionState.update_relationship_data(relationship_matrix)
        st.write("Table Relationships Generated. Go to Relationships tab to view.") 
    
    def _render_sql_query_box(self) -> None:
        """Render the SQL query box"""
        st.write("SQL Query Box")
        sql_query = st.text_area("SQL Query", value=f"SELECT * FROM {self.selected_table}")
        if st.button("Execute SQL Query"):
            with st.session_state['engine'].connect() as conn:
                result = conn.execute(text(sql_query)).fetchall()
                result_df = pd.DataFrame(result)
                st.spinner("Executing SQL Query...")
            st.dataframe(result_df)
